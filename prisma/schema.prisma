generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rounds    Round[]

  @@index([email])
}

model Round {
  id              String         @id @default(uuid())
  name            String
  companyId       String
  description     String?
  target          Float
  raised          Float          @default(0)
  minContribution Float
  maxContribution Float
  status          RoundStatus    @default(DRAFT)
  acceptedTokens  String[]
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  contributions   Contribution[]
  invitations     Invitation[]
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([companyId])
}

model Investor {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String
  password      String?
  walletAddress String?        @unique
  joinedDate    DateTime       @default(now())
  status        InvestorStatus @default(ACTIVE)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contributions Contribution[]
  invitations   Invitation[]

  @@index([email])
  @@index([status])
}

model Contribution {
  id              String             @id @default(uuid())
  roundId         String
  investorId      String
  amount          Float
  token           String
  status          ContributionStatus @default(PENDING)
  transactionHash String?            @unique
  walletAddress   String?
  contributedAt   DateTime           @default(now())
  confirmedAt     DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  investor        Investor           @relation(fields: [investorId], references: [id], onDelete: Cascade)
  round           Round              @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@index([roundId, investorId])
  @@index([status])
  @@index([contributedAt])
}

model Invitation {
  id          String           @id @default(uuid())
  roundId     String
  investorId  String
  token       String           @unique
  expiresAt   DateTime
  status      InvitationStatus @default(SENT)
  sentAt      DateTime         @default(now())
  respondedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  investor    Investor         @relation(fields: [investorId], references: [id], onDelete: Cascade)
  round       Round            @relation(fields: [roundId], references: [id], onDelete: Cascade)

  @@unique([roundId, investorId])
  @@index([status])
  @@index([token])
}

model AuditLog {
  id         String      @id @default(uuid())
  entityType String
  entityId   String
  action     AuditAction
  userId     String
  userType   String
  changes    Json?
  metadata   Json?
  timestamp  DateTime    @default(now())

  @@index([entityType, entityId])
  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

enum RoundStatus {
  DRAFT
  ACTIVE
  CLOSED
  COMPLETED
}

enum InvestorStatus {
  INVITED
  ACTIVE
  INACTIVE
}

enum ContributionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum InvitationStatus {
  SENT
  VIEWED
  ACCEPTED
  DECLINED
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  CONTRIBUTE
  INVITE
  CLOSE_ROUND
  CONFIRM_CONTRIBUTION
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  rounds    Round[]

  @@index([email])
}

// rounds track fundraising campaigns
// using float for money amounts - in production would consider decimal or storing cents as int
model Round {
  id              String         @id @default(uuid())
  name            String
  companyId       String
  description     String?
  target          Float
  raised          Float          @default(0)
  minContribution Float
  maxContribution Float
  status          RoundStatus    @default(DRAFT)
  acceptedTokens  String[]       // usdc, usdt - kept flexible as array
  startDate       DateTime
  endDate         DateTime
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  contributions   Contribution[]
  invitations     Invitation[]
  company         Company        @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([status])
  @@index([companyId])
}

// investors can be invited to multiple rounds across multiple companies
// password is nullable because they don't have it until accepting invite
model Investor {
  id            String         @id @default(uuid())
  email         String         @unique
  name          String
  password      String?        // set when accepting invitation
  walletAddress String?        @unique
  status        InvestorStatus @default(INVITED)
  joinedDate    DateTime       @default(now())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contributions Contribution[]
  invitations   Invitation[]

  @@index([email])
  @@index([status])
}

// contributions track investor commitments to specific rounds
// mocked blockchain integration - transactionHash field ready for real implementation
model Contribution {
  id              String             @id @default(uuid())
  roundId         String
  investorId      String
  amount          Float
  token           String             // usdc or usdt
  status          ContributionStatus @default(PENDING)
  confirmedAt     DateTime?
  transactionHash String?
  walletAddress   String?
  contributedAt   DateTime           @default(now())
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  round           Round              @relation(fields: [roundId], references: [id], onDelete: Cascade)
  investor        Investor           @relation(fields: [investorId], references: [id], onDelete: Cascade)

  @@index([roundId])
  @@index([investorId])
  @@index([status])
}

// invitation system - token-based onboarding with expiration
// token is unique and expires after 7 days
model Invitation {
  id          String           @id @default(uuid())
  roundId     String
  investorId  String
  token       String           @unique // secure random token for invite link
  expiresAt   DateTime
  status      InvitationStatus @default(SENT)
  respondedAt DateTime?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  round       Round            @relation(fields: [roundId], references: [id], onDelete: Cascade)
  investor    Investor         @relation(fields: [investorId], references: [id], onDelete: Cascade)

  @@unique([roundId, investorId]) // one invitation per investor per round
  @@index([token])
  @@index([roundId])
  @@index([investorId])
}

// audit logs for compliance and debugging - immutable record of all actions
// using json for flexible metadata storage
model AuditLog {
  id         String      @id @default(uuid())
  entityType String      // round, investor, contribution, etc
  entityId   String      // id of the entity
  action     AuditAction
  userId     String      // who performed the action
  userType   String      // company or investor
  changes    Json        @default("{}")
  metadata   Json        @default("{}") // extra context like ip address, user agent, etc
  timestamp  DateTime    @default(now())

  @@index([entityType, entityId])
  @@index([userId])
  @@index([action])
  @@index([timestamp])
}

enum RoundStatus {
  DRAFT
  ACTIVE
  CLOSED
  COMPLETED
}

enum InvestorStatus {
  INVITED
  ACTIVE
  INACTIVE
}

enum ContributionStatus {
  PENDING
  CONFIRMED
  FAILED
}

enum InvitationStatus {
  SENT
  VIEWED
  ACCEPTED
  DECLINED
}

// audit action types - covers all critical operations
// login/logout/register added for security monitoring
enum AuditAction {
  CREATE
  UPDATE
  DELETE
  CONTRIBUTE
  INVITE
  CLOSE_ROUND
  CONFIRM_CONTRIBUTION
  LOGIN
  LOGOUT
  REGISTER
  TOKEN_ALLOCATION  // my extra feature
  TOKEN_EXPORT
}
